{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ARLEY\\\\Desktop\\\\Reto-Final-Crud\\\\kata-crud-refactoring\\\\front\\\\src\\\\Componentes\\\\List.js\";\nimport React, { Fragment, useContext, useEffect } from \"react\";\nimport FormTodo from \"../Componentes/FormTodo.js\";\nimport { Store } from \"../Componentes/Store.js\";\nimport { HOST_API } from \"../Componentes/reducer\";\nimport \"./Styles.css\";\nexport const List = () => {\n  const {\n    dispatch,\n    state: {\n      todo,\n      lists\n    }\n  } = useContext(Store);\n  const currentTodos = todo.list;\n  const currentList = lists.list;\n  useEffect(() => {\n    fetch(HOST_API + \"/todo\").then(response => response.json()).then(list => {\n      dispatch({\n        type: \"update-list\",\n        list\n      });\n    });\n  }, [dispatch]);\n\n  const onDelete = id => {\n    fetch(HOST_API + \"/\" + id + \"/todo\", {\n      method: \"DELETE\"\n    }).then(list => {\n      dispatch({\n        type: \"delete-item\",\n        id\n      });\n    });\n  };\n\n  const onEdit = todo => {\n    dispatch({\n      type: \"edit-item\",\n      item: todo\n    });\n  };\n\n  const onChange = (event, todo, groupListId) => {\n    const request = {\n      name: todo.name,\n      id: todo.id,\n      completed: event.target.checked,\n      groupListId: groupListId\n    };\n    fetch(HOST_API + \"/todo\", {\n      method: \"PUT\",\n      body: JSON.stringify(request),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(todo => {\n      dispatch({\n        type: \"update-item\",\n        item: todo\n      });\n    });\n  }; //nuevo\n\n\n  useEffect(() => {\n    fetch(HOST_API + \"/todoslist\").then(response => response.json()).then(list => {\n      dispatch({\n        type: \"update-listOfList\",\n        list\n      });\n    });\n  }, [dispatch]);\n\n  const onDeleteList = id => {\n    const deleteAllListItem = todo.list.map(item => {\n      if (item.groupListId === id) {\n        onDelete(item.id);\n      }\n    });\n    fetch(HOST_API + \"/\" + id + \"/todoslist\", {\n      method: \"DELETE\"\n    }).then(list => {\n      dispatch({\n        type: \"delete-list\",\n        id\n      });\n    });\n  };\n\n  const decorationDone = {\n    textDecoration: \"line-through\"\n  };\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    cellSpacing: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, currentList.map(list => {\n    return React.createElement(Fragment, {\n      key: list.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"listDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      id: \"TitleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, list.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"deleteListButton\",\n      onClick: () => onDeleteList(list.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Eliminar\"))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(FormTodo, {\n      groupListId: list.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"id\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Tarea\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"\\xBFCompletado?\")), currentTodos.map(todo => {\n      if (todo.groupListId === list.id) {\n        return React.createElement(\"tr\", {\n          key: todo.id,\n          style: todo.completed ? decorationDone : {},\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, todo.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, groupListId.i), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          defaultChecked: todo.completed,\n          onChange: event => onChange(event, todo, list.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"DeleteButton\",\n          onClick: () => onDelete(todo.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"Eliminar\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"EditButton\",\n          onClick: () => onEdit(todo),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"Editar\")));\n      }\n\n      return;\n    })));\n  }))));\n};\nexport default List;","map":{"version":3,"sources":["C:/Users/ARLEY/Desktop/Reto-Final-Crud/kata-crud-refactoring/front/src/Componentes/List.js"],"names":["React","Fragment","useContext","useEffect","FormTodo","Store","HOST_API","List","dispatch","state","todo","lists","currentTodos","list","currentList","fetch","then","response","json","type","onDelete","id","method","onEdit","item","onChange","event","groupListId","request","name","completed","target","checked","body","JSON","stringify","headers","onDeleteList","deleteAllListItem","map","decorationDone","textDecoration","i"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport FormTodo from \"../Componentes/FormTodo.js\";\r\nimport { Store } from \"../Componentes/Store.js\";\r\nimport { HOST_API } from \"../Componentes/reducer\";\r\nimport \"./Styles.css\";\r\n\r\nexport const List = () => {\r\n  const {\r\n    dispatch,\r\n    state: { todo, lists },\r\n  } = useContext(Store);\r\n  const currentTodos = todo.list;\r\n  const currentList = lists.list;\r\n\r\n  useEffect(() => {\r\n    fetch(HOST_API + \"/todo\")\r\n      .then((response) => response.json())\r\n      .then((list) => {\r\n        dispatch({ type: \"update-list\", list });\r\n      });\r\n  }, [dispatch]);\r\n\r\n  const onDelete = (id) => {\r\n    fetch(HOST_API + \"/\" + id + \"/todo\", {\r\n      method: \"DELETE\",\r\n    }).then((list) => {\r\n      dispatch({ type: \"delete-item\", id });\r\n    });\r\n  };\r\n\r\n  const onEdit = (todo) => {\r\n    dispatch({ type: \"edit-item\", item: todo });\r\n  };\r\n\r\n  const onChange = (event, todo, groupListId) => {\r\n    const request = {\r\n      name: todo.name,\r\n      id: todo.id,\r\n      completed: event.target.checked,\r\n      groupListId: groupListId,\r\n    };\r\n    fetch(HOST_API + \"/todo\", {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(request),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((todo) => {\r\n        dispatch({ type: \"update-item\", item: todo });\r\n      });\r\n  };\r\n\r\n  //nuevo\r\n\r\n  useEffect(() => {\r\n    fetch(HOST_API + \"/todoslist\")\r\n      .then((response) => response.json())\r\n      .then((list) => {\r\n        dispatch({ type: \"update-listOfList\", list });\r\n      });\r\n  }, [dispatch]);\r\n\r\n  const onDeleteList = (id) => {\r\n    const deleteAllListItem = todo.list.map((item) => {\r\n      if (item.groupListId === id) {\r\n        onDelete(item.id);\r\n      }\r\n    });\r\n\r\n    fetch(HOST_API + \"/\" + id + \"/todoslist\", {\r\n      method: \"DELETE\",\r\n    }).then((list) => {\r\n      dispatch({ type: \"delete-list\", id });\r\n    });\r\n  };\r\n\r\n  const decorationDone = {\r\n    textDecoration: \"line-through\",\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <table cellSpacing=\"0\">\r\n        <tbody>\r\n          {currentList.map((list) => {\r\n            return (\r\n              <Fragment key={list.id}>\r\n                <div className=\"listDiv\">\r\n                  <tr>\r\n                    <td id=\"TitleText\">{list.name}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"deleteListButton\"\r\n                        onClick={() => onDeleteList(list.id)}\r\n                      >\r\n                        Eliminar\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <FormTodo groupListId={list.id} />\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                  <td>id</td>\r\n                    <td>Tarea</td>\r\n                    <td>¿Completado?</td>\r\n                  </tr>\r\n                  {currentTodos.map((todo) => {\r\n                    if (todo.groupListId === list.id) {\r\n                      return (\r\n                        <tr\r\n                          key={todo.id}\r\n                          style={todo.completed ? decorationDone : {}}\r\n                        >\r\n                          <td>{todo.name}</td>\r\n                          <td>{groupListId.i}</td>\r\n                          <td>\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              defaultChecked={todo.completed}\r\n                              onChange={(event) =>\r\n                                onChange(event, todo, list.id)\r\n                              }\r\n                            ></input>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              className=\"DeleteButton\"\r\n                              onClick={() => onDelete(todo.id)}\r\n                            >\r\n                              Eliminar\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              className=\"EditButton\"\r\n                              onClick={() => onEdit(todo)}\r\n                            >\r\n                              Editar\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                    return;\r\n                  })}\r\n                </div>\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default List;\r\n"]},"metadata":{},"sourceType":"module"}